<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Percent-literals | Rita Cheng's Blog]]></title>
  <link href="http://blog.ritacheng.com/blog/categories/percent-literals/atom.xml" rel="self"/>
  <link href="http://blog.ritacheng.com/"/>
  <updated>2014-08-05T13:10:01-07:00</updated>
  <id>http://blog.ritacheng.com/</id>
  <author>
    <name><![CDATA[Rita Cheng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Ultimate Guide to General Delimited Input]]></title>
    <link href="http://blog.ritacheng.com/blog/2014/08/05/the-ultimate-guide-to-general-delimited-input/"/>
    <updated>2014-08-05T13:05:25-07:00</updated>
    <id>http://blog.ritacheng.com/blog/2014/08/05/the-ultimate-guide-to-general-delimited-input</id>
    <content type="html"><![CDATA[<p>Although my heart belongs to ruby, lately, I haven&rsquo;t been using it at all&mdash; I&rsquo;ve been working on coding tumblr the game in entirely client side JavaScript. To keep my ruby skills fresh though, I&rsquo;ve been doing a reading about Ruby on the side. One topic, which I hardly gave any thought to before, has captured my attention: Ruby&rsquo;s general delimited input, otherwise known as &ldquo;percent literals&rdquo; or &ldquo;percent notation&rdquo;.</p>

<p>The provenance of these macros is unknown to me. Originally, I ran across to these as &ldquo;shorthand&rdquo; which seemed like an odd moniker to me&mdash; they&rsquo;re not at all shorter than the regular syntax. Suggestions online include that these are another of Ruby&rsquo;s inscrutable Perlisms, like those weird Perl-style global variables, but the only references to them are in the context of Ruby! I can only conclude that they&rsquo;ve nothing to do with Perl, and that&rsquo;s a myth perpetuated by Rubyists.</p>

<p>General delimited input notation is defined directly in MRI&rsquo;s parse.y, and it&rsquo;s present as far back as version 1.0 from 1996, so it&rsquo;s likely just sprung from the head of Matz and not a feature cribbed from another language as some people suggest. Whatever its origins, GDI has its uses.</p>

<p>All forms of GDI come in the same basic syntax: <code>%(some modifier) (some delimiter) (your content) (that delimiter)</code> There are six modifiers for GDI, and some of those have both interpolated and non-interpolated versions. For delimiters, you can use any non-alphanumeric symbol (in the past, you could use alphanumeric ones too, but that&rsquo;s a terrible practice.) Most commonly, you&rsquo;ll see people use <code>%Q{curly brackets}</code>, <code>%Q(parentheses)</code>, <code>%Q&lt;these pointy things&gt;</code>, and <code>%Q[square brackets]</code>, but you can use tildes and even quotation marks, for extra confusion. I&rsquo;d advise against it, though.</p>

<p><code>
%W"wait can you even do this?"
=&gt; ["wait", "can", "you", "even", "do", "this?"]
</code></p>

<p>Ruby style guides usually advocate the use of parentheses, except in the case of regular expressions, where they advocate curly brackets (since parentheses are very common in RE.)</p>

<p>Contrary to popular belief, one can use your same delimiters unescaped within the GDI, so long as you balance them. So this is fine: <code>%Q{I like braces like these:{} }</code></p>

<p>But this is not <code>%Q{I only prefer a single brace:{ }</code></p>

<p>At that point, you should escape that poor brace.</p>

<h3>%q / %Q</h3>

<p>%q is a macro for a single quote non-intepreted string, and %Q is a macro for a double quote interpreted string. Consequentially, in the former you don&rsquo;t need to really escape any characters&mdash; it&rsquo;s good for strings with both quotation marks. In the latter, you can use string interpolation, so it&rsquo;s good for strings with both interpolation and double quotes.
If you don&rsquo;t use a modifier, for example, <code>%(hello)</code>, it&rsquo;s a shorthand for %Q.
```
%Q( Daria said, &ldquo;Can you do this math?: #{1+2}&rdquo; )
=> &ldquo; Daria said, \"Can you do this math?: 3\&rdquo; "</p>

<p>%q( Quinn said, &ldquo;I cannot do this math: #{1+2}&rdquo; )
=> &ldquo; Quinn said, \"I cannot do this math: #{1+2}\&rdquo; "</p>

<p>%( Jane said, &ldquo;I can do this math: #{1+2}&rdquo; )
=> &ldquo; Jane said, \"I can do this math: 3\&rdquo; &ldquo;
```</p>

<h3>%x</h3>

<p>%x uses the <code>method and runs its contents as a command in a subshell. Use</code> unless your command contains that symbol.
<code>
%x(ruby --copyright)
=&gt; "ruby - Copyright (C) 1993-2014 Yukihiro Matsumoto\n"
</code></p>

<h3>%r</h3>

<p>%r creates an interpolated regex, but the usual syntax of <code>/regex/</code> does as well. Use it if your regex has more than one /.
<code>
%r(^Adventure\s?Time$)
=&gt; /^Adventure\s?Time$/
</code></p>

<h3>%w / %W</h3>

<p>Ruby 1.1 added %w and %W, which are likely the most common form of GDI you&rsquo;ll find in the wild. It&rsquo;s easiest to think of them as a &ldquo;word array&rdquo; or a &ldquo;whitespace-delimited array&rdquo;, if you&rsquo;re pedantic. It creates an array of strings as separated by the whitespace.
```
%W( 1 2 3 4 5 #{1+5} )
=> [&ldquo;1&rdquo;, &ldquo;2&rdquo;, &ldquo;3&rdquo;, &ldquo;4&rdquo;, &ldquo;5&rdquo;, &ldquo;6&rdquo;]</p>

<p>%w( 1 2 3 4 5 #{1+5} )
=> [&ldquo;1&rdquo;, &ldquo;2&rdquo;, &ldquo;3&rdquo;, &ldquo;4&rdquo;, &ldquo;5&rdquo;, &ldquo;#{1+5}&rdquo;]
```</p>

<h3>%s</h3>

<p>Introduced in Ruby 1.8, lord knows why this exists&mdash; nobody really uses it. %s creates a single symbol, with whitespace in tact. One might be tempted to use it for symbols with whitespace in it, but the preferred method is by using quotes after <code>:</code>, like so: <code>:"this works"</code>.
<code>
%s(this is useless)
=&gt; :"this is useless"
</code></p>

<h3>%i / %I</h3>

<p>The latest modifier for GDI, introduced only in Ruby 2.0, this is the cousin to %w and %W, but instead of an array of strings, these create arrays of symbols. As usual, %i is non-interpolated and %I is interpolated.
Be warned, that the interpolated form creates an extra string on the heap for each symbol. How often do you really want an interpolated symbol, anyways?
```
fruit = &ldquo;apple&rdquo;
%I(banana orange carrot #{fruit})
=> [:banana, :orange, :carrot, :apple]</p>

<p>%i(banana orange carrot #{fruit})
=> [:banana, :orange, :carrot, :&ldquo;#{fruit}&rdquo;]
```</p>

<h3>Conclusions</h3>

<p>In general, GDI has its pros and cons: on the one hand, you can use GDI to avoid escaping literals&mdash; if you use a lot of quotation marks and other symbols, it can be significantly less confusion to read.</p>
]]></content>
  </entry>
  
</feed>
