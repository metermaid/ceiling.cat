<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Planning | Rita Cheng's Blog]]></title>
  <link href="http://blog.ritacheng.com/blog/categories/planning/atom.xml" rel="self"/>
  <link href="http://blog.ritacheng.com/"/>
  <updated>2015-02-06T15:04:00-08:00</updated>
  <id>http://blog.ritacheng.com/</id>
  <author>
    <name><![CDATA[Rita Cheng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[API Planning]]></title>
    <link href="http://blog.ritacheng.com/blog/2014/05/27/api-planning/"/>
    <updated>2014-05-27T02:07:09-07:00</updated>
    <id>http://blog.ritacheng.com/blog/2014/05/27/api-planning</id>
    <content type="html"><![CDATA[<p>Over the last little while, I&rsquo;ve grown increasingly disillusioned with Agile developments<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. That&rsquo;s not to say I advocate using Waterfall or even any problems I have with the core tenets of the Agile manifesto; it just seems that any company that is purportedly Agile is either using it as a cover for an ad-hoc structureless process or is steeped in so many Agile tools and processes that it is hardly Agile at all anymore.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> Moreover, there is hardly any process for useful planning activities like UX Research (if it is done at all.) It&rsquo;s no wonder so many APIs seem haphazardly planned and missing core features.</p>

<p>Nowadays, I tend to advocate psuedo-Agile development with a few formal planning activities. One of these activities I&rsquo;ve been exploring these last few days is API definition. In the past, my APIs have been created in a very ad-hoc way: methods would be created as I went, with no prior thought. By the time documentation is written, it becomes clear that many decisions are made for convenience (I admit that I am often guilty of conflating my RESTful routes; GET is such a convenience sometimes. I have been getting better about this, though.)</p>

<p>Over the last little while, though, API design tools have grown in increased prominence. <a href="http://www.apiary.io">Apiary</a> has raised millions in venture capital, and recently, I volunteered at <a href="http://www.polyglotconf.com">PolyglotConf</a> where a small session advocated the use of <a href="http://www.raml.org">RAML</a>. I spent the remainder of the weekend checking these tools (and Swagger as well) out, and it was an eye opening experience.</p>

<p>Even if you&rsquo;re trying to be as lean and Agile as possible, here are a few good reasons to try out an API design tool:</p>

<ol>
<li>Design. What sets RAML and API Blueprint (from Apiary) apart from prior API design tools are their top-down approaches to API design&mdash; it can be so much easier to analyze and design an API when you&rsquo;re thinking about the bigger picture of your application. It makes it easy to see re-occurring patterns and plan for code reuse, but it can also be extremely lightweight. Just hashing out a sketch of an API in RAML made me realize that I could eliminate a few methods and planned functionality, saving myself future work.</li>
<li>Collaboration. Having a common API design language helps to facilitate working with others on an API, particularly if you&rsquo;re in a distributed team. It&rsquo;s extremely useful for when your API changes: the text format makes it easy to track ownership of changes, and you can also programmatically update your clients about changes to your API.</li>
<li>Tooling. Although Swagger is a little more oriented towards being read by machines, any of these languages can be used to standardize automated tools. Can you imagine generating an AngularJS client based on a RAML document? What a dream.</li>
<li>Generating API documentation. This was how Apiary was originally sold to me, and why I wasn&rsquo;t interested in it at the beginning&mdash; I didn&rsquo;t see too much of a reason not to just roll your own, particularly if you have other documentation systems in place. It can be pretty handy, though. It can be generated for different audiences: besides developers, you might find it handy to communicate the API to business stakeholders and marketing as well.</li>
</ol>


<p>I&rsquo;m sure I&rsquo;m missing plenty of reasons to consider formal API design, but even these four reasons are enough for me to discourage on-the-fly API creation. Even an activity as simple as listing out your routes before development can have positive benefits for your application.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Even Dave Thomas, one of the original Agile signatories, proclaimed that <a href="http://www.halfarsedagilemanifesto.org/">Agile was Dead</a>. I only partially agree, and I don&rsquo;t understand why wouldn&rsquo;t you have a conference on ballet dancing? Ballet is really hard; it&rsquo;s not just an art.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>At least this is the impression I&rsquo;m getting from off the record conversations from other developers.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
