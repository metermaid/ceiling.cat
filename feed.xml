<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="http://www.ceiling.cat/feed.xml" rel="self" type="application/atom+xml" /><link href="http://www.ceiling.cat/" rel="alternate" type="text/html" /><updated>2016-09-14T15:18:08-04:00</updated><id>http://www.ceiling.cat/</id><title>Ceiling.cat</title><author><name>Rita Cheng</name><email>rita@ritacheng.com</email></author><entry><title>Interactivity</title><link href="http://www.ceiling.cat/2016/09/13/interactivity/" rel="alternate" type="text/html" title="Interactivity" /><published>2016-09-13T00:01:35-04:00</published><updated>2016-09-13T00:01:35-04:00</updated><id>http://www.ceiling.cat/2016/09/13/interactivity</id><content type="html" xml:base="http://www.ceiling.cat/2016/09/13/interactivity/">&lt;p&gt;Comic books, for the most part, are not interactive mediums. Usually, reading them is just a series of one-sided actions and reactions: you read a comic book, and you respond emotionally to its static contents. The comic remains unmoved by your actions; it never responds to anything in your circumstance. There are occasional exceptions to this, however: if you send the publisher fan mail, and it is published, that may arguably be an interaction. You read the comic, respond with mail, and the writer or editor publishes your letter and a response. Of course, this doesn’t actually effect the body of the comic, only the back pages and extras.&lt;/p&gt;

&lt;p&gt;A more concrete example of interactivity occurs when a comic writer designs their story around it: famously in 1988, Jason Todd, the Robin at the time to Batman, was put in a life-or-death situation, and DC decided to leave his fate up to a fan vote. You would call one number to save his life; call the other to let the Joker kill him. DC had expected fans to save Jason. They’d planned more stories around him, and didn’t imagine that fans could be so cold-blooded. Instead, the fans narrowly decided to let him die, and the publisher decided to go through with the fans’ decision. They couldn’t use their planned stories, and this death had negative repercussions to the Batman character and comic for years thereafter.&lt;/p&gt;

&lt;p&gt;You read the comic book, you voted, and the comic’s story changed based on the results of that vote. That’s an interaction.&lt;/p&gt;

&lt;p&gt;More precisely, interaction is a back and forth between two or more things, or, in the words of Chris Crawford, “a cyclic process in which two actors alternately listen, think, and speak.” &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Interactivity can then be subdivided into digital and physical interactions. But where do we draw the line between these two categories? What is physical interaction? Where should we put edge cases, like augmented realities and check-in spaces?&lt;/p&gt;

&lt;p&gt;In my opinion, there isn’t a need to make these kinds of interactions a strict categorization. Things can exist on a continuum: digital, physical, or somewhere in between. Interactions are more digital when they primarily involve objects that are intangible; they are more physical when they have physical or tactile components. Using a theremin is more of a digital phenomena than playing an electric guitar, but they are both electronic instruments. Both are considerably more physical than playing music on a digital soundboard.&lt;/p&gt;

&lt;p&gt;This is somewhat akin to how Crawford asserts that interaction itself can be measured in degrees and on a continuum.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Everything is shades of grey.&lt;/p&gt;

&lt;p&gt;A good interaction can be found when the interaction uses intuitive controls and gives you proper feedback for your actions. This may mean the affordances are natural to what a user already knows: for instance, a Wacom pen tablet’s controls are in line with how people use non-digital writing utensils. You press down for more pressure; write at an angle to change the shape of your line.&lt;/p&gt;

&lt;p&gt;Sometimes, a design can be successful even if it is completely out of sync with what one knows: returning to the theremin, the control scheme is completely out of line with what a typical person knows about playing music. However, the music sounds completely otherworldly, so the otherworldly control scheme is in line with expectations. Additionally, feedback is real time and can be instantly be heard, it is still successful at helping people play music.  It may be poor interaction, on some level, but a good design.&lt;/p&gt;

&lt;p&gt;Occasionally, good design makes good use of affordances, but they are not interactive and give no feedback. A good example of this are real-time bus and subway countdown estimates. You don’t interact with them in any way; your actions do not affect the subway countdown. However, they’re great design by using your pre-existing expectations about subway timetables and signs.&lt;/p&gt;

&lt;p&gt;Like the theremin, many designers today excel at the feedback portion, but fail at using existing affordances. In a long rant&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, Bret Victor rails against the vision of the future that is screen-based– this fails to make use of thousands of years of developing physical affordances. An ideal interaction makes use of both existing affordances and also delivers feedback for your actions.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Crawford, Chris. &lt;em&gt;The Art of Interactive Design: A Euphonious and Illuminating Guide to Building Successful Software&lt;/em&gt;, June 2002. San Francisco: No Starch, 2002. pp 3. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Crawford, &lt;em&gt;The Art of Interactive Design&lt;/em&gt;, pp 6. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Victor, Bret. &lt;em&gt;A Brief Rant on the Future of Interaction Design&lt;/em&gt;, November 2011. &lt;a href=&quot;http://worrydream.com/ABriefRantOnTheFutureOfInteractionDesign/&quot;&gt;http://worrydream.com/ABriefRantOnTheFutureOfInteractionDesign/&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rita Cheng</name><email>rita@ritacheng.com</email></author><category term="itp" /><category term="pcomp" /><summary>Comic books, for the most part, are not interactive mediums. Usually, reading them is just a series of one-sided actions and reactions: you read a comic book, and you respond emotionally to its static contents. The comic remains unmoved by your actions; it never responds to anything in your circumstance. There are occasional exceptions to this, however: if you send the publisher fan mail, and it is published, that may arguably be an interaction. You read the comic, respond with mail, and the writer or editor publishes your letter and a response. Of course, this doesn’t actually effect the body of the comic, only the back pages and extras.</summary></entry><entry><title>A Fandom Timeline</title><link href="http://www.ceiling.cat/2016/09/13/fandom-timeline/" rel="alternate" type="text/html" title="A Fandom Timeline" /><published>2016-09-13T00:01:35-04:00</published><updated>2016-09-13T00:01:35-04:00</updated><id>http://www.ceiling.cat/2016/09/13/fandom-timeline</id><content type="html" xml:base="http://www.ceiling.cat/2016/09/13/fandom-timeline/">&lt;p&gt;&lt;img src=&quot;/assets/fandom_timeline.png&quot; title=&quot;big nerding&quot; width=&quot;&quot; height=&quot;&quot; alt=&quot;fandom_timeline.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This week for my fandom class, I created this timeline of past fan loves of my past. It took more time than I expected– what merited inclusion? What categories were too broad? Was there anything I was too embarrassed to include? (A definite “yes” on that last count, which is interesting. Next week is supposed to be about class dynamics of fandom, which should address this shame. Is my shame stemming from the class signifiers of these fandoms? Are subcultures necessarily indicative of class?) I did my best to track how my interests grew and faded, but I did less good of a job with how they scaled relative to each either– it was hard to keep track of them all.&lt;/p&gt;

&lt;p&gt;We also read two pieces this week: &lt;em&gt;Loving Music: Listeners, Entertainments, and the Origins of Music Fandom in Nineteenth-Century America&lt;/em&gt;, which detailed the fandom for musical performances in the 19th century, and &lt;em&gt;Shooter Boys and At-Risk Girls&lt;/em&gt;, a reflection by Molly Crabapple about being an “at-risk girl” in the 1990s. What struck me about these readings was the idea of how gender intersects with fandom– &lt;em&gt;Loving Music&lt;/em&gt; prominently featured the story of Lucy Lowell, a 19th century opera fan, and &lt;em&gt;Shooter Boys&lt;/em&gt; recounts the personal history of Crabapple. Although both pieces do address other genders, and there are certainly male fans out there, there are current discrepancies that make me wonder about the gender representation of fans throughout time.&lt;/p&gt;

&lt;p&gt;As far as I can tell, it’s little studied and demographic studies do not generally exist, but many fandom communities feel like they are primarily women. Some of the most prominent examples of fanfiction have been written for and by women: Fifty Shades of Grey started as fanfiction, Wide Sargasso Sea is essentially Jane Eyre fanfic, and the term Mary Sue was coined for a notorious type of Star Trek original character that was a clear stand-in for the (female) author. Does being a part of fandom hold particular appeal to women? Or is it just certain fandom activities, and not just fandom in general? Perhaps certain fandom communities? Is anonymity a factor?&lt;/p&gt;

&lt;p&gt;It’s hard to address these questions without doing more reading. My current hypotheses: the appeal of fandom isn’t gendered, but certain communities and activities are. Online fanwork communities are dominated by women– they are a safe place to find an audience and get feedback anonymously. It’s hard to address these questions without doing more reading; perhaps I’ll return to the topic at a further date.&lt;/p&gt;</content><author><name>Rita Cheng</name><email>rita@ritacheng.com</email></author><summary></summary></entry><entry><title>New Start: Redux</title><link href="http://www.ceiling.cat/2016/09/10/itp/" rel="alternate" type="text/html" title="New Start: Redux" /><published>2016-09-10T19:01:35-04:00</published><updated>2016-09-10T19:01:35-04:00</updated><id>http://www.ceiling.cat/2016/09/10/itp</id><content type="html" xml:base="http://www.ceiling.cat/2016/09/10/itp/">&lt;p&gt;I need to restart this blog again for ITP…&lt;/p&gt;</content><author><name>Rita Cheng</name><email>rita@ritacheng.com</email></author><summary>I need to restart this blog again for ITP…</summary></entry><entry><title>Duck-Sized Horses</title><link href="http://www.ceiling.cat/2015/02/06/duck-sized-horses/" rel="alternate" type="text/html" title="Duck-Sized Horses" /><published>2015-02-06T18:01:35-05:00</published><updated>2015-02-06T18:01:35-05:00</updated><id>http://www.ceiling.cat/2015/02/06/duck-sized-horses</id><content type="html" xml:base="http://www.ceiling.cat/2015/02/06/duck-sized-horses/">&lt;p&gt;Recently, I filled in a job questionnaire that included the infamous Reddit question, “Would you rather fight 100 duck sized horses or 1 horse sized duck?” I promptly chose the horses, but I didn’t get an interview. Perhaps they were duck people? My reasoning is below:&lt;/p&gt;

&lt;p&gt;I’d fight the 100 duck-sized horses. In first year, I attended the University of Waterloo, where geese were well-known to follow and attack students– I learned a healthy amount of respect and fear for waterfowl. While the horses have the advantage of number and greater intelligence than the duck [they can gang up and will take longer than one hit to kill], they are also easily spooked and it should be fairly easy to break them up into smaller groups (and capture with nets or pillow cases if available). All of their muscle is in the upper legs, so shattering their miniaturized and spindly lower limbs should not take too much effort. The two primary weapons of horses, kicks and bites, are mitigated by the miniaturization– and furthermore, they are herbivores, so they do not have any intrinsic motivation to bite me.&lt;/p&gt;

&lt;p&gt;On the contrary, ducks are omnivores and the direct descendants of dinosaurs, so the giant duck would likely try to eat me. They have ridges on their beaks that resemble teeth, and horse-proportioned, they would easily be able to break bones, shatter skulls, and destroy any weapon I could use on it. Although it would not likely be able to fly at that size, their wings will still be powerful and likely to kill me with one hit.&lt;/p&gt;

&lt;p&gt;Finally, the tiny hooves of 100 duck-sized horses would make for a great back massage and tiny horses would make for excellent christmas and birthday presents for friends and family.&lt;/p&gt;</content><author><name>Rita Cheng</name><email>rita@ritacheng.com</email></author><summary>Recently, I filled in a job questionnaire that included the infamous Reddit question, “Would you rather fight 100 duck sized horses or 1 horse sized duck?” I promptly chose the horses, but I didn’t get an interview. Perhaps they were duck people? My reasoning is below:</summary></entry><entry><title>I Was a Teenage Web Developer</title><link href="http://www.ceiling.cat/2014/08/15/i-was-a-teenage-web-developer/" rel="alternate" type="text/html" title="I Was a Teenage Web Developer" /><published>2014-08-15T16:02:40-04:00</published><updated>2014-08-15T16:02:40-04:00</updated><id>http://www.ceiling.cat/2014/08/15/i-was-a-teenage-web-developer</id><content type="html" xml:base="http://www.ceiling.cat/2014/08/15/i-was-a-teenage-web-developer/">&lt;p&gt;(*This post was originally posted to &lt;a href=&quot;https://medium.com/@repleats/i-was-a-teenage-web-designer-9b3f65d30d58&quot;&gt;Medium&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;When I was in high school, the other web designers I knew were other teenage girls. When I was 14, I attended a seminar to encourage young women to consider computer science. When I went to university, about a third of my first year CS classes were female.&lt;/p&gt;

&lt;p&gt;Any of these women could have become computer scientists. Some of them did. Many of them didn’t. So why did I?&lt;/p&gt;

&lt;h3 id=&quot;tumblr-before-tumblr&quot;&gt;Tumblr before Tumblr&lt;/h3&gt;

&lt;p&gt;I was in the fifth grade when I made my first web page. It’s a typical nerd origin story: I wanted a truly unique pet page for my Neopet, and to do that, I needed to go beyond the provided templates and edit the HTML directly. I borrowed HTML books from the library, and created a webpage with a blinking black background, haphazardly placed tables, and glowing blue headers to match my electric kau.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mookie.gif&quot; class=&quot;left&quot; title=&quot;RIP, Mookie3001.&quot; width=&quot;150&quot; height=&quot;150&quot; alt=&quot;mookie.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was beautiful. It was an eyesore. I was hooked.&lt;/p&gt;

&lt;p&gt;I went on to create many more web pages. In the fifth grade alone, I also created a Neopets fan site, a personal website, and a website for my “writing”&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I even volunteered to do my older brother’s Information Technology project, a Simpsons page complete with a “Who Needs the Kwik-E-Mart?” MIDI playing in the background.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webpages.jpg&quot; class=&quot;left&quot; title=&quot;I was 13 for the first of these images. These aren’t even half of the websites I made. I was a weirdly productive little teenager.&quot; width=&quot;1200&quot; height=&quot;1350&quot; alt=&quot;webpages.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By high school, I was creating so many websites I can scarcely remember them all now. I begged my mother to use her credit card so I can buy my own domain name. I honed my skills in HTML, CSS, and PHP. Most importantly, I discovered communities of like-minded teenage web designers— a few in person, but mostly online.&lt;/p&gt;

&lt;p&gt;I can find hardly any trace of these communities left on the modern internet. Trips to the Internet Archive are my primary reassurance that they weren’t a figment of my imagination. The modern equivalent of these communities would be Tumblr: they both connect like-minded, introverted teenagers with blogs, tutorial websites, and maybe a website for screen captures of favourite TV Shows. As part of those communities, we learned HTML, CSS, graphic design skills, and maybe some PHP.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; We linked each other in blog rolls and talked to each other on phpBB/XMB forums. I was a member of the pixel-art-filled Dodo’s Message Board.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Being a part of DMB helped me learn some new skills, get aid when I needed it, and made me feel a little less alone in the world.&lt;/p&gt;

&lt;p&gt;Because I was making these websites, I decided to take the Information Technology class in high school and even asked to be bumped to the next grade’s offering of it. I was isolated as the only girl in a room full of older boys. I coded rudimentary C++, made my web pages, and retreated into my blogs and message boards.&lt;/p&gt;

&lt;h3 id=&quot;the-imperial-oil-seminar-in-computer-science-for-young-women&quot;&gt;The Imperial Oil Seminar in Computer Science for Young Women&lt;/h3&gt;

&lt;p&gt;In the ninth grade, my InfoTech teacher suggested that I apply to attend the University of Waterloo’s Seminar in CS for Young Women. I filled in my application, and a few months later, I took a week off school to fly to exotic Waterloo, Ontario. It would be the first and only time I’d be in a computer lab with only other women.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I learned a few things from this seminar. How to take apart a computer. How to program a rudimentary GUI in Tcl/Tk. What career paths you can choose with a CS degree. At this point, websites were my weird hobby, but in the future I saw in that seminar, it could be a career.&lt;/p&gt;

&lt;p&gt;As it turns out, I was one of the few girls referred by their InfoTech teachers— generally, they were referred by their math teachers or their guidance counsellors. It would be the first time the other girls had ever programmed, and some of these young women would go on to earn Computer Science degrees.&lt;/p&gt;

&lt;p&gt;I didn’t realize the impact it had on me at the time, but in retrospect, made a huge impression. Three years later, I started a degree in Computer Science at the University of Waterloo.&lt;/p&gt;

&lt;h3 id=&quot;my-waterloo&quot;&gt;My Waterloo&lt;/h3&gt;

&lt;p&gt;University was a series of firsts for me: the first time I ever lived away from home. The first time I truly loved programming, and not just web design. The first time I ever thought about quitting computer science.&lt;/p&gt;

&lt;p&gt;My first year at Waterloo was lonely. Unlike most freshmen, I both lived off-campus and away from home. The university mishandled my application and, by the time they sorted it out, there wasn’t room in the dormitories for me. Nobody I knew went to Waterloo— if they headed east, it was either to Toronto or Montreal. Furthermore, in my second semester, Dodo’s Message Board shut down. I had never been so isolated in my life.&lt;/p&gt;

&lt;p&gt;The problems you face while being in a visibly marginalized group aren’t necessarily different from those of the majority,&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; but being marginalized can often make those same problems worse. Feeling lonely is bad for any college student. Being a minority compounds that loneliness. Getting poor grades is terrible. But when you’re the only girl and you’re getting terrible grades? You feel like that’s a sign to cut your losses and leave. Or maybe you feel extra pressure to stay: you’re the sole representative for your gender.&lt;/p&gt;

&lt;p&gt;Later on, my Operating Systems professor kicked out every student who failed the first assignment. The idea was to save students from paying the course fees: if you couldn’t understand pointers, you would probably fail the course. It would be best to wait until you did understand pointers. A friend of mine failed this assignment. The removal was intended to be a mercy, but it felt like a rejection: “You’re not smart enough for this. Get out.”&lt;/p&gt;

&lt;p&gt;Instead of leaving Computer Science, I left Waterloo and headed back to the West Coast. I went to the University of Victoria where my best friend was going to school. I wasn’t quite so alone anymore. I’ve stayed in the West Coast since, and earned my degree in Computer Science with honours.&lt;/p&gt;

&lt;h3 id=&quot;lessons&quot;&gt;Lessons&lt;/h3&gt;

&lt;p&gt;I’m eliding a lot of details in this origin story. I’ve retconned&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; away employment, alienation and abuses— I’m choosing which stories define me. Here’s what helped along the way:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Availability. I’m grateful for having a computer and information technology classes. Furthermore, I’m grateful that my household had enough money that I didn’t need to work as a teenager and that I didn’t have to take care of any siblings. Around 20% of households do not have a computer at home, and some schools do not have information technology classes. There are many households where would-be computer scientists wouldn’t have time for the programming lessons advocated by Code.org. You can’t begin an outreach program with the baseline assumption that people can just make time to take part in them. We need to provide hardware and economic assistance to those who need it.&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;Motivation. I’m looking at the quotes page of Code.org, and most of the reasons to start programming suggested by these leaders and celebrities are either about economic or personal development. These may not be motivating for everybody, so we can expand this list by encouraging coding as a creative outlet, mental stimulation, or just a fun activity. It’s especially useful to have intrinsic motivations when you’re marginalized. It helps keep you going when you’re burnt out and you think that you’re not good enough. When it comes down to it, I like making websites and have fun doing it.&lt;/li&gt;
  &lt;li&gt;Outreach Programs. I was already making websites by the time I attended the CS Seminar, but it helped me envision a future with Computer Science. Outreach programs are often the first time someone tries programming. They can dispel programming myths and misconceptions: I’ve known a lot of people who were discouraged from computing because they didn’t enjoy math.&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; Programming is a different skill though, and finding calculus dull doesn’t mean a CS degree is not for you. Outreach programs can clear that up.&lt;/li&gt;
  &lt;li&gt;A Support Network. Being supported by my family and having a network of other teenagers with websites were both critical to me entering this field. They were also important for discouraging me from leaving. Even introverted nerds hate feeling lonely. It helps to have someone willing to help you when you need it, and to listen carefully even when you don’t want explicit help. Sometimes, it’s nice just to talk about your problems without being questioned about them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m extremely grateful for all the advantages I’ve had in life. I began as a teenage designer, and end here as a full-stack web developer. Truth be told, I hadn’t looked at this history in years. I suffer Impostor Syndrome and forget my past. It should be clear to me: I belong here, and women who weren’t teenage web designers belong here too. You don’t need to have a typical nerd origin story to be a programmer.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Bad poetry? Oh no-etry! &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Even if it was just enough to wrangle your installation of B2. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;I was too intimidated to join VortexMB or fu.CK. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Being in a lab by myself or with a singular female friend doesn’t count. On the other hand, I can’t count the times when the rest of the lab is only men. I notice every time. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;Sometimes they are though. There are abuses only marginalized people face. But that’s not what my life was like at this point. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;Retroactive continuity, like in the comics, when you alter previously established history. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;There are services like Free Geek for hardware, but having to pay or volunteer is still a barrier. &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot;&gt;
      &lt;p&gt;For the record, half my AP Calculus class were women in high school. &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rita Cheng</name><email>rita@ritacheng.com</email></author><category term="me" /><summary>(*This post was originally posted to Medium.)</summary></entry><entry><title>The Ultimate Guide to General Delimited Input</title><link href="http://www.ceiling.cat/2014/08/05/the-ultimate-guide-to-general-delimited-input/" rel="alternate" type="text/html" title="The Ultimate Guide to General Delimited Input" /><published>2014-08-05T16:05:25-04:00</published><updated>2014-08-05T16:05:25-04:00</updated><id>http://www.ceiling.cat/2014/08/05/the-ultimate-guide-to-general-delimited-input</id><content type="html" xml:base="http://www.ceiling.cat/2014/08/05/the-ultimate-guide-to-general-delimited-input/">&lt;p&gt;Although my heart belongs to ruby, lately, I haven’t been using it at all– I’ve been working on coding tumblr the game in entirely client side JavaScript. To keep my ruby skills fresh though, I’ve been doing a reading about Ruby on the side. One topic, which I hardly gave any thought to before, has captured my attention: Ruby’s general delimited input, otherwise known as “percent literals” or “percent notation”.&lt;/p&gt;

&lt;p&gt;The provenance of these macros is unknown to me. Originally, I ran across to these as “shorthand” which seemed like an odd moniker to me– they’re not at all shorter than the regular syntax. Suggestions online include that these are another of Ruby’s inscrutable Perlisms, like those weird Perl-style global variables, but the only references to them are in the context of Ruby! I can only conclude that they’ve nothing to do with Perl, and that’s a myth perpetuated by Rubyists.&lt;/p&gt;

&lt;p&gt;General delimited input notation is defined directly in MRI’s parse.y, and it’s present as far back as version 1.0 from 1996, so it’s likely just sprung from the head of Matz and not a feature cribbed from another language as some people suggest. Whatever its origins, GDI has its uses.&lt;/p&gt;

&lt;p&gt;All forms of GDI come in the same basic syntax: &lt;code class=&quot;highlighter-rouge&quot;&gt;%(some modifier) (some delimiter) (your content) (that delimiter)&lt;/code&gt; There are six modifiers for GDI, and some of those have both interpolated and non-interpolated versions. For delimiters, you can use any non-alphanumeric symbol (in the past, you could use alphanumeric ones too, but that’s a terrible practice.) Most commonly, you’ll see people use &lt;code class=&quot;highlighter-rouge&quot;&gt;%Q{curly brackets}&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;%Q(parentheses)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;%Q&amp;lt;these pointy things&amp;gt;&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;%Q[square brackets]&lt;/code&gt;, but you can use tildes and even quotation marks, for extra confusion. I’d advise against it, though.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%W&quot;wait can you even do this?&quot;
=&amp;gt; [&quot;wait&quot;, &quot;can&quot;, &quot;you&quot;, &quot;even&quot;, &quot;do&quot;, &quot;this?&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ruby style guides usually advocate the use of parentheses, except in the case of regular expressions, where they advocate curly brackets (since parentheses are very common in RE.)&lt;/p&gt;

&lt;p&gt;Contrary to popular belief, one can use your same delimiters unescaped within the GDI, so long as you balance them. So this is fine: &lt;code class=&quot;highlighter-rouge&quot;&gt;%Q{I like braces like these:{} }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But this is not &lt;code class=&quot;highlighter-rouge&quot;&gt;%Q{I only prefer a single brace:{ }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At that point, you should escape that poor brace.&lt;/p&gt;

&lt;h3 id=&quot;q--q&quot;&gt;%q / %Q&lt;/h3&gt;
&lt;p&gt;%q is a macro for a single quote non-intepreted string, and %Q is a macro for a double quote interpreted string. Consequentially, in the former you don’t need to really escape any characters– it’s good for strings with both quotation marks. In the latter, you can use string interpolation, so it’s good for strings with both interpolation and double quotes.
If you don’t use a modifier, for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;%(hello)&lt;/code&gt;, it’s a shorthand for %Q.
```
%Q( Daria said, “Can you do this math?: #{1+2}” )
=&amp;gt; “ Daria said, &quot;Can you do this math?: 3&quot; “&lt;/p&gt;

&lt;p&gt;%q( Quinn said, “I cannot do this math: #{1+2}” )
=&amp;gt; “ Quinn said, &quot;I cannot do this math: #{1+2}&quot; “&lt;/p&gt;

&lt;p&gt;%( Jane said, “I can do this math: #{1+2}” )
=&amp;gt; “ Jane said, &quot;I can do this math: 3&quot; “
&lt;code class=&quot;highlighter-rouge&quot;&gt;
### %x
%x uses the \` method and runs its contents as a command in a subshell. Use \` unless your command contains that symbol.
&lt;/code&gt;
%x(ruby –copyright)
=&amp;gt; “ruby - Copyright (C) 1993-2014 Yukihiro Matsumoto\n”
&lt;code class=&quot;highlighter-rouge&quot;&gt;
### %r
%r creates an interpolated regex, but the usual syntax of `/regex/` does as well. Use it if your regex has more than one /.
&lt;/code&gt;
%r(^Adventure\s?Time$)
=&amp;gt; /^Adventure\s?Time$/
&lt;code class=&quot;highlighter-rouge&quot;&gt;
### %w / %W
Ruby 1.1 added %w and %W, which are likely the most common form of GDI you'll find in the wild. It's easiest to think of them as a &quot;word array&quot; or a &quot;whitespace-delimited array&quot;, if you're pedantic. It creates an array of strings as separated by the whitespace.
&lt;/code&gt;
%W( 1 2 3 4 5 #{1+5} )
=&amp;gt; [“1”, “2”, “3”, “4”, “5”, “6”]&lt;/p&gt;

&lt;p&gt;%w( 1 2 3 4 5 #{1+5} )
=&amp;gt; [“1”, “2”, “3”, “4”, “5”, “#{1+5}”]
&lt;code class=&quot;highlighter-rouge&quot;&gt;
### %s
Introduced in Ruby 1.8, lord knows why this exists-- nobody really uses it. %s creates a single symbol, with whitespace in tact. One might be tempted to use it for symbols with whitespace in it, but the preferred method is by using quotes after `:`, like so: `:&quot;this works&quot;`.
&lt;/code&gt;
%s(this is useless)
=&amp;gt; :”this is useless”
&lt;code class=&quot;highlighter-rouge&quot;&gt;
### %i / %I
The latest modifier for GDI, introduced only in Ruby 2.0, this is the cousin to %w and %W, but instead of an array of strings, these create arrays of symbols. As usual, %i is non-interpolated and %I is interpolated.
Be warned, that the interpolated form creates an extra string on the heap for each symbol. How often do you really want an interpolated symbol, anyways?
&lt;/code&gt;
fruit = “apple”
%I(banana orange carrot #{fruit})
=&amp;gt; [:banana, :orange, :carrot, :apple]&lt;/p&gt;

&lt;p&gt;%i(banana orange carrot #{fruit})
=&amp;gt; [:banana, :orange, :carrot, :”#{fruit}”]
```&lt;/p&gt;

&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;In general, GDI has its pros and cons: on the one hand, you can use GDI to avoid escaping literals– if you use a lot of quotation marks and other symbols, it can be significantly less confusion to read.&lt;/p&gt;</content><author><name>Rita Cheng</name><email>rita@ritacheng.com</email></author><summary>Although my heart belongs to ruby, lately, I haven’t been using it at all– I’ve been working on coding tumblr the game in entirely client side JavaScript. To keep my ruby skills fresh though, I’ve been doing a reading about Ruby on the side. One topic, which I hardly gave any thought to before, has captured my attention: Ruby’s general delimited input, otherwise known as “percent literals” or “percent notation”.</summary></entry><entry><title>API Planning</title><link href="http://www.ceiling.cat/2014/05/27/api-planning/" rel="alternate" type="text/html" title="API Planning" /><published>2014-05-27T05:07:09-04:00</published><updated>2014-05-27T05:07:09-04:00</updated><id>http://www.ceiling.cat/2014/05/27/api-planning</id><content type="html" xml:base="http://www.ceiling.cat/2014/05/27/api-planning/">&lt;p&gt;Over the last little while, I’ve grown increasingly disillusioned with Agile developments[^1]. That’s not to say I advocate using Waterfall or even any problems I have with the core tenets of the Agile manifesto; it just seems that any company that is purportedly Agile is either using it as a cover for an ad-hoc structureless process or is steeped in so many Agile tools and processes that it is hardly Agile at all anymore.[^2] Moreover, there is hardly any process for useful planning activities like UX Research (if it is done at all.) It’s no wonder so many APIs seem haphazardly planned and missing core features.&lt;/p&gt;

&lt;p&gt;Nowadays, I tend to advocate psuedo-Agile development with a few formal planning activities. One of these activities I’ve been exploring these last few days is API definition. In the past, my APIs have been created in a very ad-hoc way: methods would be created as I went, with no prior thought. By the time documentation is written, it becomes clear that many decisions are made for convenience (I admit that I am often guilty of conflating my RESTful routes; GET is such a convenience sometimes. I have been getting better about this, though.)&lt;/p&gt;

&lt;p&gt;Over the last little while, though, API design tools have grown in increased prominence. &lt;a href=&quot;http://www.apiary.io&quot;&gt;Apiary&lt;/a&gt; has raised millions in venture capital, and recently, I volunteered at &lt;a href=&quot;http://www.polyglotconf.com&quot;&gt;PolyglotConf&lt;/a&gt; where a small session advocated the use of &lt;a href=&quot;http://www.raml.org&quot;&gt;RAML&lt;/a&gt;. I spent the remainder of the weekend checking these tools (and Swagger as well) out, and it was an eye opening experience.&lt;/p&gt;

&lt;p&gt;Even if you’re trying to be as lean and Agile as possible, here are a few good reasons to try out an API design tool:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Design. What sets RAML and API Blueprint (from Apiary) apart from prior API design tools are their top-down approaches to API design– it can be so much easier to analyze and design an API when you’re thinking about the bigger picture of your application. It makes it easy to see re-occurring patterns and plan for code reuse, but it can also be extremely lightweight. Just hashing out a sketch of an API in RAML made me realize that I could eliminate a few methods and planned functionality, saving myself future work.&lt;/li&gt;
  &lt;li&gt;Collaboration. Having a common API design language helps to facilitate working with others on an API, particularly if you’re in a distributed team. It’s extremely useful for when your API changes: the text format makes it easy to track ownership of changes, and you can also programmatically update your clients about changes to your API.&lt;/li&gt;
  &lt;li&gt;Tooling. Although Swagger is a little more oriented towards being read by machines, any of these languages can be used to standardize automated tools. Can you imagine generating an AngularJS client based on a RAML document? What a dream.&lt;/li&gt;
  &lt;li&gt;Generating API documentation. This was how Apiary was originally sold to me, and why I wasn’t interested in it at the beginning– I didn’t see too much of a reason not to just roll your own, particularly if you have other documentation systems in place. It can be pretty handy, though. It can be generated for different audiences: besides developers, you might find it handy to communicate the API to business stakeholders and marketing as well.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m sure I’m missing plenty of reasons to consider formal API design, but even these four reasons are enough for me to discourage on-the-fly API creation. Even an activity as simple as listing out your routes before development can have positive benefits for your application.
[^1]: Even Dave Thomas, one of the original Agile signatories, proclaimed that &lt;a href=&quot;http://www.halfarsedagilemanifesto.org/&quot;&gt;Agile was Dead&lt;/a&gt;. I only partially agree, and I don’t understand why wouldn’t you have a conference on ballet dancing? Ballet is really hard; it’s not just an art.
[^2]: At least this is the impression I’m getting from off the record conversations from other developers.&lt;/p&gt;</content><author><name>Rita Cheng</name><email>rita@ritacheng.com</email></author><summary>Over the last little while, I’ve grown increasingly disillusioned with Agile developments1. That’s not to say I advocate using Waterfall or even any problems I have with the core tenets of the Agile manifesto; it just seems that any company that is purportedly Agile is either using it as a cover for an ad-hoc structureless process or is steeped in so many Agile tools and processes that it is hardly Agile at all anymore.2 Moreover, there is hardly any process for useful planning activities like UX Research (if it is done at all.) It’s no wonder so many APIs seem haphazardly planned and missing core features.


  
    
      Even Dave Thomas, one of the original Agile signatories, proclaimed that Agile was Dead. I only partially agree, and I don’t understand why wouldn’t you have a conference on ballet dancing? Ballet is really hard; it’s not just an art. &amp;#8617;
    
    
      At least this is the impression I’m getting from off the record conversations from other developers. &amp;#8617;</summary></entry><entry><title>Password Auditing</title><link href="http://www.ceiling.cat/2014/04/20/password-auditing/" rel="alternate" type="text/html" title="Password Auditing" /><published>2014-04-20T03:35:06-04:00</published><updated>2014-04-20T03:35:06-04:00</updated><id>http://www.ceiling.cat/2014/04/20/password-auditing</id><content type="html" xml:base="http://www.ceiling.cat/2014/04/20/password-auditing/">&lt;p&gt;With the recent disclosure of the Heartbleed exploit, account security is undergoing increased media scrutiny and many of my less technical friends have asked me questions about how to proceed. Although it is likely unnecessary to change every single account password, now is as good a time as any to do a security audit of yourself and your application accounts. Here is a small audit that is fairly easy to do (and indeed, I did so earlier today):&lt;/p&gt;

&lt;h3 id=&quot;collect-a-list-of-your-online-accounts&quot;&gt;Collect a List of your Online Accounts&lt;/h3&gt;

&lt;p&gt;The first step is intuitive enough: to secure yourself, you need to know where your openings are. If you use a password manager such as &lt;a href=&quot;https://lastpass.com/&quot;&gt;LastPass&lt;/a&gt;, &lt;a href=&quot;http://www.roboform.com&quot;&gt;Roboform&lt;/a&gt;, or &lt;a href=&quot;https://agilebits.com/onepassword&quot;&gt;1Password&lt;/a&gt;, this should be extremely straightforward and you can move on to the next step. They can also be built into your browser (Chrome has a fairly commonly used one.)&lt;/p&gt;

&lt;p&gt;If you do not, I recommend using one to all but the most paranoid of users, as they simplify keeping track of your accounts and passwords, and can be synced between your devices. Otherwise, make a list manually by going through your commonly used websites and look at popular websites (popular websites are at once more likely to be secure and more likely to be targeted for an attack.) Also, search your inbox for account registration or password reset emails. (Search “account”, “ username”, “password”.) Once you have a list, you can move on.&lt;/p&gt;

&lt;h3 id=&quot;try-to-delete-unused-accounts&quot;&gt;Try to Delete Unused Accounts&lt;/h3&gt;

&lt;p&gt;I sign up for many websites on a whim and never use them again. Are there any sites like this for you as well? Or do you never really use that Instagram anyways? No opening is better than a secure one, so you should probably just close these accounts down.&lt;/p&gt;

&lt;p&gt;Look through your list and find any accounts you could really do without, and update your accounts with dummy information and new passwords. Even if your account is successfully deleted, it’s hard to ensure that a website will truly honour your privacy or your request. After this, it’s time to delete the account, which can be extremely difficult to do.&lt;/p&gt;

&lt;p&gt;First, you can check &lt;a href=&quot;http://justdelete.me/&quot;&gt;JustDelete.Me&lt;/a&gt; if the website is listed, and follow their instructions for removing your account. Otherwise, start by looking at your account settings or their help sections– they may have information on deleting your account, or if you’re lucky, a button to do so. Then, if you’re out of luck, send an email to customer support asking them to delete your account (include any pertinent information, like your username.) If they tell you it is impossible, make sure you have removed your personal information and changed the password as previously instructed,  and hope that this will suffice.&lt;/p&gt;

&lt;h3 id=&quot;change-these-passwords&quot;&gt;Change These Passwords&lt;/h3&gt;

&lt;p&gt;For the remaining accounts, go through and change the passwords for them as necessary. Here is my order of priority of whether you should change your password or not:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Exploit Affected Websites (such as by Heartbleed) Immediate change&lt;/li&gt;
  &lt;li&gt;Duplicate Passwords&lt;/li&gt;
  &lt;li&gt;Bad Passwords&lt;/li&gt;
  &lt;li&gt;Really Old Passwords (2+ Years)&lt;/li&gt;
  &lt;li&gt;Old Passwords (1+ Year)&lt;/li&gt;
  &lt;li&gt;Kinda Old Passwords (4+ Months)&lt;/li&gt;
  &lt;li&gt;Recent Passwords (&amp;lt; 4 Months, lower priority)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Anything at levels 4 or higher should really be changed now. Bad Passwords include most passwords that are dictionary words, and do not include very many numbers or symbols. (You can look up “password entropy” for thoughts on this and advice on creating new passwords.)&lt;/p&gt;

&lt;p&gt;For the typical end user, I just recommend using a password manager to generate and keep track of new passwords. Otherwise, there have been very many articles on password generation, including &lt;a href=&quot;http://xkcd.com/936/&quot;&gt;this famous XKCD comic&lt;/a&gt;. For my money, I believe that any wildly popular advice on passwords is likely to be insecure, so you should really make up your own rules involving numbers and symbols. For instance, maybe you made up a secret language in Grade 6 that you remember to this day– make use of that. Use camel case pig Latin. Intersperse symbols and numbers throughout all of these.&lt;/p&gt;

&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;After you are done changing your passwords, make sure that you don’t write them down or leave access to them where a person can find them, and if you need to share access to an account with someone, change the password first. Remember, the easiest way to gain access to somebody’s account is through social engineering.&lt;/p&gt;

&lt;p&gt;Finally, it is likely a good idea to also ensure that all your apps and programs are up-to-date, and to do an audit of what apps have access to your Facebook and Twitter accounts. A virus scan probably also won’t hurt either. However, simply changing your passwords as listed above is a good first step for people who are confused and pressed on time.&lt;/p&gt;</content><author><name>Rita Cheng</name><email>rita@ritacheng.com</email></author><summary>With the recent disclosure of the Heartbleed exploit, account security is undergoing increased media scrutiny and many of my less technical friends have asked me questions about how to proceed. Although it is likely unnecessary to change every single account password, now is as good a time as any to do a security audit of yourself and your application accounts. Here is a small audit that is fairly easy to do (and indeed, I did so earlier today):</summary></entry><entry><title>Kanye West and my Feminism</title><link href="http://www.ceiling.cat/2014/04/02/kanye-west/" rel="alternate" type="text/html" title="Kanye West and my Feminism" /><published>2014-04-02T00:28:58-04:00</published><updated>2014-04-02T00:28:58-04:00</updated><id>http://www.ceiling.cat/2014/04/02/kanye-west</id><content type="html" xml:base="http://www.ceiling.cat/2014/04/02/kanye-west/">&lt;p&gt;The other day I was asked about how I enjoy the music of Kanye West, despite being a staunch feminist. Although there is undeniable misogynistic content in his songs, I overlook it because I love his production and enjoy his other themes– his criticisms of cultural system and capitalism (although he is extremely materialistic, he can still criticize the power structures that keep certain people in power), his mix of self deprecation and hubris, and discussions of race, family, justice and power. This doesn’t excuse him for his lyrical treatment of most women as sexual objects, but I acknowledge these problems in the context of how American society views hip hop.&lt;/p&gt;

&lt;p&gt;I tolerate a lot more misogyny in hip hop than most feminists because white capitalism was what made it an inherent part of the genre. Historically, blackness has long been sold as transgressive to white kids– even when it was a white man performing it, as with Elvis and his heavy borrowing from black artists. Consequentially, more transgressive– which often manifests as misogyny– artists sell better, get more critically acclaimed and make their labels happier. I don’t have to be happy with every woman being labelled a slut but I don’t really blame black artists for having to play this terrible game of garnering audiences with it.&lt;/p&gt;

&lt;p&gt;Furthermore, misogyny is baked into literally every genre but we focus on hip hop as a misogynistic genre because of anti-blackness (if this seems contentious, one can look into how often racist slurs are used in this criticism). I don’t think many white artists have been as scrutinized as hip hop artists are, despite being similarly problematic– the Decemberists are forgiven for being ‘in character’ when they sing about the rape and murder of women; John Lennon was abusive in life and in song (see “run for your life”). Indie music in general depict women as dead, infantalized, or depressed– overall, we are helpless creatures. Arguably, the former is worse than the latter, but I find the discrimination and aggressions that I encounter frequently less tolerable than the ones that are infrequent for me. This is likely a fault of mine. but I tolerate Kanye and hip hop because I encounter their style of misogyny less frequently in real life. I still draw my line at sexual and physical violence against women in lyrics, but honestly, I don’t think this content is much more common in hip hop than other artists.&lt;/p&gt;</content><author><name>Rita Cheng</name><email>rita@ritacheng.com</email></author><summary>The other day I was asked about how I enjoy the music of Kanye West, despite being a staunch feminist. Although there is undeniable misogynistic content in his songs, I overlook it because I love his production and enjoy his other themes– his criticisms of cultural system and capitalism (although he is extremely materialistic, he can still criticize the power structures that keep certain people in power), his mix of self deprecation and hubris, and discussions of race, family, justice and power. This doesn’t excuse him for his lyrical treatment of most women as sexual objects, but I acknowledge these problems in the context of how American society views hip hop.</summary></entry><entry><title>Pokedex Design</title><link href="http://www.ceiling.cat/2014/02/24/pokedex-design/" rel="alternate" type="text/html" title="Pokedex Design" /><published>2014-02-24T14:20:11-05:00</published><updated>2014-02-24T14:20:11-05:00</updated><id>http://www.ceiling.cat/2014/02/24/pokedex-design</id><content type="html" xml:base="http://www.ceiling.cat/2014/02/24/pokedex-design/">&lt;p&gt;I just started a new playthrough of Pokemon Leafgreen– the last Pokemon game I had played through was Ruby, so I thought I’d ease back into playing these games with this one. It’s both a continuation of the series and a game I’m intimately familiar with– it is a remake of the first generation of Pokemon games.&lt;/p&gt;

&lt;p&gt;One thing that struck me very quickly was how poorly designed the Pokedex was in terms of user experience. Unless you’re part of Twitch playing Pokemon, there is hardly any reason to consult the Pokedex beyond looking at your catch and seen counts. The Pokedex has improved since the first generation– there is now at a glance type information, clear thumbnails of each Pokemon, and different categories, but it is still largely unhelpful for many potential use cases. I often find myself creating spreadsheets or looking for web applications to meet my needs.&lt;/p&gt;

&lt;p&gt;Roughly, here is a persona for a potential Pokedex User:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Red is a 10 year old boy from Pallet Town, who is on a quest to become a Pokemon Master. He would like to learn more about the Pokemon he has seen or caught, and could use some help on his journey to catch ‘em all. He is quite adept at using technology, regularly using his computer to store and withdraw his Pokemon and items.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Pokedex is reasonably helpful for Red to discover facts about his Pokemon, but, particularly in Firered and Leafgreen, it falls short as a reference for catching Pokemon. Some features that would help include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Searching by name. This is a feature that was removed in FR/LG, for reasons unknown. Consequentially, the only way to find a Pokemon is to look through many pages, particularly if you do not know its local habitat.&lt;/li&gt;
  &lt;li&gt;Filtering by Caught / Uncaught status. If I’d like to know more about the Pokemon I own, there would be a lot less friction if I didn’t have to scroll through entries that are incomplete, and vice versa.&lt;/li&gt;
  &lt;li&gt;Viewing Pokemon by Location Found. Apparently a feature added in B2/W2 and then removed for no apparent reason, this would be a boon for completionists, allowing a trainer to view at a glance whether they’ve caught all the Pokemon in an area.&lt;/li&gt;
  &lt;li&gt;Custom lists. In attempting to complete the Kanto Pokedex, I find myself making lists of Pokemon I intend to catch in the wild, Pokemon I need to remember to trade, and Pokemon I need to remember to train. It would be handy if this was a feature facilitated in the game rather than Google Documents I’ve created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I were a Pokedex designer, I would want to conduct user studies, (If Professor Oak wanted us to test the devices, why didn’t he ask us for our thoughts on them?) write up task analyses, and create storyboards for an improved interface. On the other hand, if I were in the Pokemon universe, I’d probably forget about all of that, and just try to catch them all myself.&lt;/p&gt;</content><author><name>Rita Cheng</name><email>rita@ritacheng.com</email></author><summary>I just started a new playthrough of Pokemon Leafgreen– the last Pokemon game I had played through was Ruby, so I thought I’d ease back into playing these games with this one. It’s both a continuation of the series and a game I’m intimately familiar with– it is a remake of the first generation of Pokemon games.</summary></entry></feed>
